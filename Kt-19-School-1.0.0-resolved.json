{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/Kt-19/School/1.0.0",
  "tags": [
    {
      "name": "subject",
      "description": "Everything about Subjects"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/subject": {
      "get": {
        "tags": [
          "subject"
        ],
        "summary": "Show all subjects",
        "operationId": "findAllsubjects",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "No subjects found"
          }
        }
      },
      "post": {
        "tags": [
          "subject"
        ],
        "summary": "Add a new subject",
        "operationId": "addsubject",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Subject object that needs to be added to the course",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subject added"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/subject/{Id}": {
      "put": {
        "tags": [
          "subject"
        ],
        "summary": "update Subject details",
        "operationId": "updatesubjectById",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of suject to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Subject details that needs to be update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subject updated"
          },
          "400": {
            "description": "Subject not updated"
          }
        }
      },
      "delete": {
        "tags": [
          "subject"
        ],
        "summary": "Deletes subject",
        "operationId": "deletesubject",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of subject to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Subject deleted"
          },
          "404": {
            "description": "Subject not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Show all teachers",
        "operationId": "findAllteachers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "No teachers found"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{user}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getSubjectByUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Get subject that is taught by user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Subject": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "English"
        },
        "text": {
          "type": "string",
          "description": "subjects detail"
        }
      },
      "xml": {
        "name": "Subject"
      }
    }
  }
}